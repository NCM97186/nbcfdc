<?php

/**
 * @file
 * Contains computed_field_plugin.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function computed_field_plugin_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the computed_field_plugin module.
    case 'help.page.computed_field_plugin':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a plugin to allow developers to create computed field via the Drupal Plugin API.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function computed_field_plugin_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  $plugins = \Drupal::service('plugin.manager.computed_field_plugin')
    ->getDefinitions();
  foreach ($plugins as $plugin) {
    if (empty($plugin['entity_types']) ||
      (in_array($entity_type->id(), $plugin['entity_types']) && (empty($plugin['bundles']) || in_array($bundle, $plugin['bundles'])))) {
      $fields[$plugin['id']] = BaseFieldDefinition::create($plugin['type'])
        ->setLabel($plugin['label'])
        ->setComputed(TRUE)
        ->setClass($plugin['class'])
        ->setDisplayConfigurable('view', TRUE);
    }
  }
  return $fields;
}

/**
 * Implements hook_form_alter().
 */
function computed_field_plugin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /**
   * Remove Computed render array field type from available options.
   *
   * @todo: Remove this alteration when related core issue is fixed.
   * @link: https://www.drupal.org/project/drupal/issues/2932273
   */
  if ($form_id === 'field_ui_field_storage_add_form') {
    // Remove Computed render array field type from "Add a new field".
    foreach ($form['add']['new_storage_type']['#options'] as $category => $fields) {
      foreach ($fields as $key => $value) {
        if ($key === 'computed_render_array') {
          unset($form['add']['new_storage_type']['#options'][$category][$key]);
        }
      }
    }

    // Remove Computed render array field type from "Re-use an existing field".
    if (isset($form['add']['existing_storage_name']) && isset($form['add']['existing_storage_name']['#options'])) {
      foreach ($form['add']['existing_storage_name']['#options'] as $key => $value) {
        $arguments = $value->getArguments();
        if ($arguments['@type']->getUntranslatedString() === 'Computed render array') {
          unset($form['add']['existing_storage_name']['#options'][$key]);
        }
      }
    }
  }
}
